{"name":"GWT DOM EventBinder","tagline":"GWT generator for handling dom events via annotations","body":"##What is GWT DOM EventBinder?\r\nGWT's UiBinder is great in many ways. \r\nLet's refresh some ideas at the base of UiBinder.\r\n\r\nFrom the [UiBinder Overview](http://www.gwtproject.org/doc/latest/DevGuideUiBinder.html#Overview):\r\n> At heart, a GWT application is a web page. And when you're laying out a web page, writing HTML and CSS is the most natural way to get the job done. The UiBinder framework allows you to do exactly that: build your apps as HTML pages with GWT widgets sprinkled throughout them.\r\n\r\nAnd from the [Simple binding of event handlers](http://www.gwtproject.org/doc/latest/DevGuideUiBinder.html#Simple_binding):\r\n>One of UiBinder's goals is to reduce the tedium of building user interfaces in Java code, and few things in Java require more mind-numbing boilerplate than event handlers.\r\n\r\n> .....\r\n\r\n>In a UiBinder owner class, you can use the @UiHandler annotation to have all of that anonymous class nonsense written for you.\r\n\r\n>```java\r\npublic class MyFoo extends Composite {\r\n  @UiField Button button;\r\n>\r\n  public MyFoo() {\r\n    initWidget(button);\r\n  }\r\n>\r\n  @UiHandler(\"button\")\r\n  void handleClick(ClickEvent e) {\r\n    Window.alert(\"Hello, AJAX\");\r\n  }\r\n}\r\n```\r\n>However, there is one limitation (at least for now): you can only use @UiHandler with events thrown by widget objects, not DOM elements. That is, &lt;g:Button&gt;, not &lt;button&gt;.\r\n\r\n**The last sentence explains the limitation that this library is trying to remove.**","google":"UA-561402-2","note":"Don't delete this file! It's used internally to help with page regeneration."}